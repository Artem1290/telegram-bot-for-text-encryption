import telebot
import logging

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)


user_keys = {}

key_mason = {
    'A': '@', 'B': '#', 'C': '$', 'D': '%', 'E': '&', 'F': '*', 'G': '(',
    'H': ')', 'I': '!', 'J': '^', 'K': '_', 'L': '+', 'M': '~', 'N': '`',
    'O': '-', 'P': '=', 'Q': '{', 'R': '}', 'S': '[', 'T': ']', 'U': ';',
    'V': ':', 'W': '"', 'X': "'", 'Y': '<', 'Z': '>', ' ': ' '
}

key_mason_rev = {v: k for k, v in key_mason.items()}

def mason_encrypt(text):
    return "".join(key_mason.get(char.upper(), char) for char in text)

def mason_decrypt(text):
    return "".join(key_mason_rev.get(char, char) for char in text)


def caesar_encrypt(txt, shift=3):
    result = ""
    for char in txt:
        if char.isalpha():
            base = ord('A') if char.isupper() else ord('a')
            result += chr((ord(char) - base + shift) % 26 + base)
        else:
            result += char
    return result

def caesar_decrypt(txt, shift=3):
    result = ""
    for char in txt:
        if char.isalpha():
            base = ord('A') if char.isupper() else ord('a')
            result += chr((ord(char) - base - shift) % 26 + base)
        else:
            result += char
    return result


TOKEN = 'YOUR TOKEN'
bot = telebot.TeleBot(TOKEN)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –Ω–æ–≤–∏–π –±–æ—Ç üòÉ")

    #logs
    logging.info(f"User {message.from_user.username} (id={message.from_user.id}) used /start command")



@bot.message_handler(commands=['help'])
def send_help(message):
    bot.reply_to(message,
                 "–ö–æ–º–∞–Ω–¥–∏:\n"
                 "/start ‚Äî –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏\n"
                 "/help ‚Äî –¥–æ–ø–æ–º–æ–≥–∞\n"
                 "/cesar_encrypt <—Ç–µ–∫—Å—Ç> ‚Äî —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –¶–µ–∑–∞—Ä–µ–º\n"
                 "/cesar_decrypt <—Ç–µ–∫—Å—Ç> ‚Äî —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –¶–µ–∑–∞—Ä–µ–º\n"
                 "/set_key ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–ª—é—á –¶–µ–∑–∞—Ä—è\n"
                 "/mason_encrypt <—Ç–µ–∫—Å—Ç> ‚Äî —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –º–∞—Å–æ–Ω—Å—å–∫–∏–º —à—Ä–∏—Ñ—Ç–æ–º\n"
                 "/mason_decrypt <—Ç–µ–∫—Å—Ç> ‚Äî —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –º–∞—Å–æ–Ω—Å—å–∫–∏–º —à—Ä–∏—Ñ—Ç–æ–º")

    #logs
    logging.info(f"User {message.from_user.username} (id={message.from_user.id}) used /help command")

# –ú–∞—Å–æ–Ω—Å—å–∫–∏–π —à–∏—Ñ—Ä
@bot.message_handler(commands=['mason_encrypt'])
def mason_encrypt_text(message):
    text = message.text[14:]
    if not text:
        bot.reply_to(message, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –º–∞—Å–æ–Ω—Å—å–∫–∏–º —à—Ä–∏—Ñ—Ç–æ–º. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /mason_encrypt hello")
        return

    encrypted = mason_encrypt(text)

    #logs
    logging.info(f"User {message.from_user.username} (id={message.from_user.id}) used /mason_encrypt with text: {text}")
    logging.info(f"Result for user {message.from_user.id}: {encrypted}")
    bot.reply_to(message, f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {encrypted}")

@bot.message_handler(commands=['mason_decrypt'])
def mason_decrypt_text(message):
    text = message.text[14:]
    if not text:
        bot.reply_to(message, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –º–∞—Å–æ–Ω—Å—å–∫–∏–º —à—Ä–∏—Ñ—Ç–æ–º. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /mason_decrypt @#%-")
        return

    #logs
    decrypted = mason_decrypt(text)
    logging.info(f"User {message.from_user.username} (id={message.from_user.id}) used /mason_decrypt with text: {text}")
    logging.info(f"Result for user {message.from_user.id}: {decrypted}")
    bot.reply_to(message, f"–†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {decrypted}")


# –¶–µ–∑–∞—Ä
@bot.message_handler(commands=['cesar_encrypt'])
def encrypt_text(message):
    text = message.text[15:]
    if not text:
        bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è.")
        return

    shift = user_keys.get(message.from_user.id, 3)
    encrypted = caesar_encrypt(text, shift)

    #logs
    logging.info(f"User {message.from_user.username} (id={message.from_user.id}) used /cesar_encrypt with text: {text}")
    logging.info(f"Result for user {message.from_user.id}: {encrypted}")

    bot.reply_to(message, f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {encrypted}")

@bot.message_handler(commands=['cesar_decrypt'])
def decrypt_text(message):
    text = message.text[15:]
    if not text:
        bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è.")
        return

    shift = user_keys.get(message.from_user.id, 3)
    decrypted = caesar_decrypt(text, shift)

    #logs
    logging.info(f"User {message.from_user.username} (id={message.from_user.id}) used /cesar_decrypt with text: {text}")
    logging.info(f"Result for user {message.from_user.id}: {decrypted}")

    bot.reply_to(message, f"–†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {decrypted}")


@bot.message_handler(commands=['set_key'])
def set_key(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –¥–ª—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è:")
    bot.register_next_step_handler(message, save_key)


def save_key(message):
    try:
        key = int(message.text)
        user_keys[message.from_user.id] = key
        bot.reply_to(message, f"–ö–ª—é—á —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {key}")

        # logs
        logging.info(f"User {message.from_user.username} (id={message.from_user.id}) set Caesar key: {key}")

    except ValueError:
        bot.reply_to(message, "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")
        logging.warning(f"User {message.from_user.username} (id={message.from_user.id}) tried to set invalid key: {message.text}")


bot.polling()
